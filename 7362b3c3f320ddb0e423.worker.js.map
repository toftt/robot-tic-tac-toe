{"version":3,"sources":["../webpack/bootstrap","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","robot/tic-tac-toe/UCT.ts","robot/tic-tac-toe/Board.ts","robot/tic-tac-toe/State.ts","robot/tic-tac-toe/Node.ts","robot/tic-tac-toe/Tree.ts","robot/tic-tac-toe/index.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","robot/tic-tac-toe/CustomTicTacToe.ts","robot/tic-tac-toe/FullBoard.ts","worker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_arrayLikeToArray","arr","len","length","arr2","Array","_slicedToArray","isArray","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","minLen","toString","slice","constructor","from","test","TypeError","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","configurable","writable","_createClass","protoProps","staticProps","WinStatus","UCT","totalVisit","nodeWinScore","nodeVisit","Number","MAX_SAFE_INTEGER","Math","sqrt","log","node","children","Error","parentVisit","state","visitCount","childrenWithUCTValues","map","child","uctValue","winScore","reduce","maxNode","candidate","State","board","this","clone","possibleStates","getAvailableMoves","forEach","move","newState","performMove","availableMoves","randomMove","floor","random","score","MIN_SAFE_INTEGER","Node","args","parent","type","console","printBoard","print","Tree","root","MonteCarloTreeSearch","winStatus","thinkTime","opponent","getOpposedStatus","tree","rootNode","end","Date","valueOf","x","promisingNode","selectPromisingNode","checkStatus","IN_PROGRESS","expandNode","nodeToExplore","getRandomChildNode","playoutResult","simulateRandomPlayout","backPropogation","winnerNode","getChildWithMaxScore","findBestNodeWithUCT","getAllPossibleStates","newNode","tempNode","tempState","boardStatus","randomPlay","incrementVisitCount","getLatestPlayerToMove","addScore","WIN_SCORE","_defineProperty","obj","ownKeys","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread2","arguments","source","getOwnPropertyDescriptors","defineProperties","winningBoards","CustomTicTacToeBoard","presence","color","lastPerformedMove","printEachMove","copy","fill","_","index","number","playerOneToMove","bitMask","some","PLAYER_X","PLAYER_O","DRAW","status","row","j","player","join","newBoard","FullBoard","currentBoard","boards","exportBoard","getAvailableMovesForOuterGrid","innerMove","boardToCheck","outerMove","updatePresenceAndColor","getRows","winners","acc","playerO","playerX","g","getPrintedRows","a","b","res","exportedBoard","importBoard","mcst","onmessage","e","_e$data","data","nextBoard","findNextMove","postMessage","addEventListener","f","ref","method","id","params","__webpack_exports__","Promise","resolve","then","reject","result","catch","error","message","stack"],"mappings":"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","file":"7362b3c3f320ddb0e423.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/robot-tic-tac-toe/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import { Node } from \"./Node\";\n\nexport class UCT {\n  static uctValue(totalVisit: number, nodeWinScore: number, nodeVisit: number) {\n    if (nodeVisit === 0) {\n      return Number.MAX_SAFE_INTEGER;\n    }\n\n    return (\n      nodeWinScore / nodeVisit +\n      1.41 * Math.sqrt(Math.log(totalVisit) / nodeVisit)\n    );\n  }\n\n  static findBestNodeWithUCT(node: Node): Node {\n    if (node.children.length === 0)\n      throw new Error(\"Node can not have 0 children\");\n\n    const parentVisit = node.state.visitCount;\n\n    const childrenWithUCTValues = node.children.map(child => ({\n      node: child,\n      value: this.uctValue(\n        parentVisit,\n        child.state.winScore,\n        child.state.visitCount\n      )\n    }));\n\n    const max = childrenWithUCTValues.reduce((maxNode, candidate) => {\n      if (maxNode.value > candidate.value) return maxNode;\n      return candidate;\n    }, childrenWithUCTValues[0]);\n\n    return max.node;\n  }\n}\n","const winningBoards: Array<number> = [\n  0b111000000,\n  0b000111000,\n  0b000000111,\n  0b100100100,\n  0b010010010,\n  0b001001001,\n  0b100010001,\n  0b001010100\n];\n\nexport interface Board {\n  clone(): Board;\n  getAvailableMoves(): Array<number>;\n  getPlayerToMove(): WinStatus;\n  getLatestPlayerToMove(): WinStatus;\n  getOpposedStatus(status: WinStatus): WinStatus;\n  performMove(move: number): void;\n  checkStatus(): WinStatus;\n  printBoard(): void;\n}\n\nexport enum WinStatus {\n  IN_PROGRESS = \"IN_PROGRESS\",\n  DRAW = \"DRAW\",\n  PLAYER_X = \"PLAYER_X\",\n  PLAYER_O = \"PLAYER_O\"\n}\n\nexport class TicTacToeBoard implements Board {\n  presence: number = 0;\n  color: number = 0;\n  playerOneToMove: boolean = true;\n  printEachMove: boolean = false;\n\n  clone() {\n    const copy = new TicTacToeBoard();\n    copy.presence = this.presence;\n    copy.color = this.color;\n    copy.playerOneToMove = this.playerOneToMove;\n    return copy;\n  }\n\n  getAvailableMoves(): Array<number> {\n    return new Array(9)\n      .fill(undefined)\n      .map((_, index) => index)\n      .filter(number => {\n        const bitMask = 2 ** number;\n        return (bitMask & this.presence) === 0;\n      });\n  }\n\n  getPlayerToMove() {\n    return this.playerOneToMove ? WinStatus.PLAYER_X : WinStatus.PLAYER_O;\n  }\n\n  getLatestPlayerToMove() {\n    return this.playerOneToMove ? WinStatus.PLAYER_O : WinStatus.PLAYER_X;\n  }\n\n  performMove(move: number) {\n    const bitMask = 2 ** move;\n\n    this.presence = this.presence | bitMask;\n    if (this.playerOneToMove) {\n      this.color = this.color | bitMask;\n    }\n\n    this.playerOneToMove = !this.playerOneToMove;\n    if (this.printEachMove) this.printBoard();\n  }\n\n  checkStatus() {\n    if (\n      winningBoards.some(\n        board => (this.presence & board & this.color) === board\n      )\n    )\n      return WinStatus.PLAYER_X;\n\n    if (\n      winningBoards.some(\n        board => (this.presence & board & ~this.color) === board\n      )\n    )\n      return WinStatus.PLAYER_O;\n\n    if (this.presence === 0b111111111) return WinStatus.DRAW;\n    return WinStatus.IN_PROGRESS;\n  }\n\n  getOpposedStatus(status: WinStatus) {\n    if (status === WinStatus.PLAYER_O) return WinStatus.PLAYER_X;\n    return WinStatus.PLAYER_O;\n  }\n\n  playRandomGame() {\n    this.printBoard();\n    while (this.checkStatus() === WinStatus.IN_PROGRESS) {\n      const moves = this.getAvailableMoves();\n      const randomMove = moves[Math.floor(Math.random() * moves.length)];\n      this.performMove(randomMove);\n    }\n  }\n\n  printBoard() {\n    const board = [];\n\n    for (let i = 0; i < 3; i++) {\n      const row = [];\n\n      for (let j = 0; j < 3; j++) {\n        const move = i * 3 + j;\n        if ((2 ** move) & this.presence) {\n          const player = (2 ** move) & this.color;\n          row.push(player ? \"x\" : \"o\");\n        } else row.push(\" \");\n      }\n      board.push(`| ${row.join(\" \")} |`);\n    }\n    const boardStatus = `Win status: ${this.checkStatus()}, Player to move: ${this.getPlayerToMove()}`;\n    console.log(`${boardStatus}\\n${board.join(\"\\n\")}`);\n  }\n}\n","import { Board } from \"./Board\";\n\nexport class State {\n    // @ts-ignore\n  board: Board;\n  visitCount: number = 0;\n  winScore: number = 0;\n\n  constructor(state?: State) {\n    if (state) {\n      this.board = state.board.clone();\n      this.visitCount = state.visitCount;\n      this.winScore = state.winScore;\n    }\n  }\n\n  getAllPossibleStates() {\n    const possibleStates: Array<State> = [];\n    const availableMoves = this.board.getAvailableMoves();\n\n    availableMoves.forEach(move => {\n      const newState = new State(this);\n\n      newState.board.performMove(move);\n      newState.visitCount = 0;\n      possibleStates.push(newState);\n    });\n    return possibleStates;\n  }\n\n  incrementVisitCount() {\n    this.visitCount++;\n  }\n\n  randomPlay() {\n    const availableMoves = this.board.getAvailableMoves();\n    const randomMove =\n      availableMoves[Math.floor(Math.random() * availableMoves.length)];\n    this.board.performMove(randomMove);\n  }\n\n  addScore(score: number): void {\n    if (this.winScore !== Number.MIN_SAFE_INTEGER) {\n      this.winScore += score;\n    }\n  }\n}\n","import { State } from \"./State\";\n\ntype Arguments =\n  | {\n      type: \"empty\";\n    }\n  | {\n      type: \"state\";\n      state: State;\n    }\n  | {\n      type: \"state-parent-children\";\n      state: State;\n      parent: Node;\n      children: Array<Node>;\n    }\n  | {\n      type: \"node\";\n      node: Node;\n    };\n\nexport class Node {\n  state: State;\n  children: Array<Node>;\n    // @ts-ignore\n  parent: Node;\n\n  constructor(args: Arguments) {\n    switch (args.type) {\n      case \"empty\": {\n        this.state = new State();\n        this.children = [];\n        break;\n      }\n      case \"state\": {\n        this.state = args.state;\n        this.children = [];\n        break;\n      }\n      case \"state-parent-children\": {\n        this.state = args.state;\n        this.parent = args.parent;\n        this.children = args.children;\n        break;\n      }\n      case \"node\": {\n        const { node } = args;\n\n        this.children = [];\n        this.state = new State(node.state);\n\n        if (node.parent) {\n          this.parent = node.parent;\n        }\n\n        node.children.forEach(child => {\n          this.children.push(new Node({ type: \"node\", node: child }));\n        });\n        break;\n      }\n    }\n  }\n\n  getRandomChildNode() {\n    return this.children[Math.floor(Math.random() * this.children.length)];\n  }\n\n  getChildWithMaxScore(): Node {\n    return this.children.reduce((maxNode, candidate) => {\n      if (maxNode.state.visitCount > candidate.state.visitCount) return maxNode;\n      return candidate;\n    }, this.children[0]);\n  }\n\n  print() {\n    console.log(\"---------------------------------------------------\");\n    console.log(\n      `count: ${this.state.visitCount} score: ${this.state.winScore}`\n    );\n    this.state.board.printBoard();\n    console.log(\"-------------------children------------------------\");\n    this.children.forEach(child => child.print());\n    console.log(\"---------------------------------------------------\");\n    console.log();\n  }\n}\n","import { Node } from \"./Node\";\n\nexport class Tree {\n  root: Node;\n\n  constructor() {\n    this.root = new Node({ type: \"empty\" });\n  }\n}\n","import { UCT } from \"./UCT\";\nimport { WinStatus, Board } from \"./Board\";\nimport { Node } from \"./Node\";\nimport { Tree } from \"./Tree\";\n\nexport class MonteCarloTreeSearch {\n  static readonly WIN_SCORE: number = 10;\n\n  findNextMove(board: Board, winStatus: WinStatus, thinkTime: number) {\n    const opponent = board.getOpposedStatus(winStatus);\n\n    const tree = new Tree();\n    const rootNode = tree.root;\n\n    rootNode.state.board = board.clone();\n\n    const end = new Date().valueOf() + thinkTime;\n    let x = 0;\n    while (new Date().valueOf() < end) {\n      x++;\n      // selection\n      const promisingNode = this.selectPromisingNode(rootNode);\n      // expansion\n      if (promisingNode.state.board.checkStatus() === WinStatus.IN_PROGRESS) {\n        this.expandNode(promisingNode);\n      }\n\n      // simulation\n      let nodeToExplore = promisingNode;\n      if (promisingNode.children.length > 0) {\n        nodeToExplore = promisingNode.getRandomChildNode();\n      }\n\n      const playoutResult = this.simulateRandomPlayout(nodeToExplore, opponent);\n\n      // update\n      this.backPropogation(nodeToExplore, playoutResult);\n    }\n\n    console.log(`ran ${x} iterations`);\n    const winnerNode = rootNode.getChildWithMaxScore();\n    tree.root = winnerNode;\n    return winnerNode.state.board;\n  }\n\n  private selectPromisingNode(rootNode: Node): Node {\n    let node = rootNode;\n    while (node.children.length !== 0) {\n      node = UCT.findBestNodeWithUCT(node);\n    }\n    return node;\n  }\n\n  private expandNode(node: Node): void {\n    const possibleStates = node.state.getAllPossibleStates();\n    possibleStates.forEach(state => {\n      const newNode = new Node({ type: \"state\", state });\n      newNode.parent = node;\n      node.children.push(newNode);\n    });\n  }\n\n  private simulateRandomPlayout(node: Node, opponent: WinStatus) {\n    const tempNode = new Node({ type: \"node\", node });\n    const tempState = tempNode.state;\n    let boardStatus = tempState.board.checkStatus();\n\n    if (boardStatus === opponent) {\n      tempNode.parent.state.winScore = Number.MIN_SAFE_INTEGER;\n      return boardStatus;\n    }\n\n    while (boardStatus === WinStatus.IN_PROGRESS) {\n      tempState.randomPlay();\n      boardStatus = tempState.board.checkStatus();\n    }\n\n    return boardStatus;\n  }\n\n  private backPropogation(nodeToExplore: Node, playoutResult: WinStatus) {\n    let tempNode = nodeToExplore;\n\n    while (tempNode) {\n      tempNode.state.incrementVisitCount();\n      if (tempNode.state.board.getLatestPlayerToMove() === playoutResult) {\n        tempNode.state.addScore(MonteCarloTreeSearch.WIN_SCORE);\n      }\n      tempNode = tempNode.parent;\n    }\n  }\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { WinStatus } from \"./Board\";\n\nconst winningBoards: Array<number> = [\n  0b111000000,\n  0b000111000,\n  0b000000111,\n  0b100100100,\n  0b010010010,\n  0b001001001,\n  0b100010001,\n  0b001010100\n];\n\ninterface ExportedBoard {\n  presence: number;\n  color: number;\n}\nexport class CustomTicTacToeBoard {\n  presence: number = 0;\n  color: number = 0;\n  lastPerformedMove: WinStatus | null = null;\n  printEachMove: boolean = false;\n\n  clone() {\n    const copy = new CustomTicTacToeBoard();\n    copy.presence = this.presence;\n    copy.color = this.color;\n    copy.lastPerformedMove = this.lastPerformedMove;\n    return copy;\n  }\n\n  static importBoard(board: ExportedBoard) {\n    const newBoard = new CustomTicTacToeBoard();\n    newBoard.presence = board.presence;\n    newBoard.color = board.color;\n    return newBoard;\n  }\n\n  exportBoard(): ExportedBoard {\n    return {\n      presence: this.presence,\n      color: this.color\n    };\n  }\n\n  getAvailableMoves(): Array<number> {\n    if (this.checkStatus() !== WinStatus.IN_PROGRESS) return [];\n\n    return new Array(9)\n      .fill(undefined)\n      .map((_, index) => index)\n      .filter(number => {\n        const bitMask = 2 ** number;\n        return (bitMask & this.presence) === 0;\n      });\n  }\n\n  performMove(move: number, playerOneToMove: boolean) {\n    const bitMask = 2 ** move;\n\n    this.presence = this.presence | bitMask;\n    if (playerOneToMove) {\n      this.color = this.color | bitMask;\n    }\n  }\n\n  checkStatus() {\n    if (\n      winningBoards.some(\n        board => (this.presence & board & this.color) === board\n      )\n    )\n      return WinStatus.PLAYER_X;\n\n    if (\n      winningBoards.some(\n        board => (this.presence & board & ~this.color) === board\n      )\n    )\n      return WinStatus.PLAYER_O;\n\n    if (this.presence === 0b111111111) return WinStatus.DRAW;\n    return WinStatus.IN_PROGRESS;\n  }\n\n  getOpposedStatus(status: WinStatus) {\n    if (status === WinStatus.PLAYER_O) return WinStatus.PLAYER_X;\n    return WinStatus.PLAYER_O;\n  }\n\n  getRows() {\n    return new Array(9)\n      .fill(undefined)\n      .map((_, index) => index)\n      .map(number => {\n        const bitMask = 2 ** number;\n        if ((bitMask & this.presence) === 0) return \"empty\";\n        else if ((bitMask & this.presence & this.color) === 0) return \"player2\";\n        return \"player1\";\n      });\n  }\n\n  getPrintedRows(): string[] {\n    const board = [];\n\n    for (let i = 0; i < 3; i++) {\n      const row = [];\n\n      for (let j = 0; j < 3; j++) {\n        const move = i * 3 + j;\n        if ((2 ** move) & this.presence) {\n          const player = (2 ** move) & this.color;\n          row.push(player ? \"x\" : \"o\");\n        } else row.push(\" \");\n      }\n      board.push(`| ${row.join(\" \")} |`);\n    }\n\n    return board;\n  }\n}\n","import { Board, WinStatus } from \"./Board\";\nimport { CustomTicTacToeBoard } from \"./CustomTicTacToe\";\n\nconst winningBoards: Array<number> = [\n  0b111000000,\n  0b000111000,\n  0b000000111,\n  0b100100100,\n  0b010010010,\n  0b001001001,\n  0b100010001,\n  0b001010100\n];\n\ninterface ExportedBoard {\n  color: number;\n  presence: number;\n  currentBoard: number | null;\n  boards: Array<{ presence: number; color: number }>;\n  playerOneToMove: boolean;\n}\nexport class FullBoard implements Board {\n  printEachMove: boolean = false;\n  currentBoard: number | null = null;\n  private presence: number = 0;\n  private color: number = 0;\n  private playerOneToMove: boolean = true;\n  boards: Array<CustomTicTacToeBoard> = [];\n\n  constructor() {\n    for (let i = 0; i < 9; i++) {\n      this.boards.push(new CustomTicTacToeBoard());\n    }\n  }\n\n  clone() {\n    const copy = new FullBoard();\n    copy.currentBoard = this.currentBoard;\n    copy.presence = this.presence;\n    copy.color = this.color;\n    copy.playerOneToMove = this.playerOneToMove;\n    copy.boards = this.boards.map(board => board.clone());\n    return copy;\n  }\n\n  static importBoard(exportedBoard: ExportedBoard) {\n    const newBoard = new FullBoard();\n    newBoard.color = exportedBoard.color;\n    newBoard.presence = exportedBoard.presence;\n    newBoard.currentBoard = exportedBoard.currentBoard;\n    newBoard.boards = exportedBoard.boards.map(board =>\n      CustomTicTacToeBoard.importBoard(board)\n    );\n    newBoard.playerOneToMove = exportedBoard.playerOneToMove;\n    return newBoard;\n  }\n\n  exportBoard(): ExportedBoard {\n    return {\n      color: this.color,\n      presence: this.presence,\n      currentBoard: this.currentBoard,\n      boards: this.boards.map(board => board.exportBoard()),\n      playerOneToMove: this.playerOneToMove\n    };\n  }\n\n  private getAvailableMovesForOuterGrid() {\n    return new Array(9)\n      .fill(undefined)\n      .map((_, index) => index)\n      .filter(number => {\n        const bitMask = 2 ** number;\n        return (bitMask & this.presence) === 0;\n      });\n  }\n\n  getAvailableMoves() {\n    // if there is a selected board\n    if (this.currentBoard !== null)\n      return this.boards[this.currentBoard].getAvailableMoves();\n\n    const availableMoves: Array<number> = [];\n    this.getAvailableMovesForOuterGrid().forEach(move => {\n      const board = this.boards[move];\n      if (board.checkStatus() === WinStatus.IN_PROGRESS) {\n        board.getAvailableMoves().forEach(innerMove => {\n          availableMoves.push(move * 10 + innerMove + 10);\n        });\n      }\n    });\n\n    return availableMoves;\n  }\n\n  getPlayerToMove() {\n    return this.playerOneToMove ? WinStatus.PLAYER_X : WinStatus.PLAYER_O;\n  }\n\n  getLatestPlayerToMove() {\n    return this.playerOneToMove ? WinStatus.PLAYER_O : WinStatus.PLAYER_X;\n  }\n\n  private updatePresenceAndColor(boardToCheck: number) {\n    const board = this.boards[boardToCheck];\n\n    const status = board.checkStatus();\n    // lets do nothing for draws for the moment and see how it works out\n    if (status !== WinStatus.IN_PROGRESS && status !== WinStatus.DRAW) {\n      const bitMask = 2 ** boardToCheck;\n      this.presence = this.presence | bitMask;\n\n      if (status === WinStatus.PLAYER_X) {\n        this.color = this.color | bitMask;\n      }\n    }\n  }\n\n  performMove(move: number) {\n    const outerMove = move < 9 ? this.currentBoard : Math.floor(move / 10) - 1;\n    const innerMove = move < 9 ? move : move % 10;\n\n    // @ts-ignore\n    this.boards[outerMove].performMove(innerMove, this.playerOneToMove);\n\n    const statusOfNextBoard = this.boards[innerMove].checkStatus();\n\n    if (statusOfNextBoard === WinStatus.IN_PROGRESS)\n      this.currentBoard = innerMove;\n    else {\n      this.currentBoard = null;\n    }\n\n    // @ts-ignore\n    this.updatePresenceAndColor(outerMove);\n\n    this.playerOneToMove = !this.playerOneToMove;\n\n    if (this.printEachMove) this.printBoard();\n  }\n\n  getBoards() {\n    return this.boards.map(board => board.getRows());\n  }\n\n  checkStatus() {\n    if (\n      winningBoards.some(\n        board => (this.presence & board & this.color) === board\n      )\n    )\n      return WinStatus.PLAYER_X;\n\n    if (\n      winningBoards.some(\n        board => (this.presence & board & ~this.color) === board\n      )\n    )\n      return WinStatus.PLAYER_O;\n\n    if (this.getAvailableMoves().length === 0) {\n      const winners = this.boards.reduce(\n        (acc, board) => {\n          if (board.checkStatus() === WinStatus.PLAYER_O)\n            return { ...acc, playerO: acc.playerO + 1 };\n          if (board.checkStatus() === WinStatus.PLAYER_X)\n            return { ...acc, playerX: acc.playerX + 1 };\n          return acc;\n        },\n        { playerO: 0, playerX: 0 }\n      );\n      if (winners.playerO > winners.playerX) return WinStatus.PLAYER_O;\n      if (winners.playerX > winners.playerO) return WinStatus.PLAYER_X;\n      return WinStatus.DRAW;\n    }\n    return WinStatus.IN_PROGRESS;\n  }\n\n  getOpposedStatus(status: WinStatus) {\n    if (status === WinStatus.PLAYER_O) return WinStatus.PLAYER_X;\n    return WinStatus.PLAYER_O;\n  }\n  printBoard() {\n    const board = [];\n    for (let i = 0; i < 3; i++) {\n      const row: string[][] = [[], [], []];\n      for (let j = 0; j < 3; j++) {\n        const g = i * 3 + j;\n        const [a, b, c] = this.boards[g].getPrintedRows();\n\n        row[0].push(a);\n        row[1].push(b);\n        row[2].push(c);\n      }\n      const res = row.map(x => x.join(\"    \")).join(\"\\n\");\n      board.push(res);\n    }\n    console.log(\n      `\nGame status: ${this.checkStatus()} -- Current square: ${\n        this.currentBoard !== null ? this.currentBoard + 1 : \"None\"\n      }\n\n${board.join(\"\\n\\n\")}\n`\n    );\n  }\n}\n","import _slicedToArray from\"/Users/toft/Projects/tic-tac-toe-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{MonteCarloTreeSearch}from\"./robot/tic-tac-toe\";import{FullBoard}from\"./robot/tic-tac-toe/FullBoard\";var mcst=new MonteCarloTreeSearch();onmessage=function onmessage(e){var _e$data=_slicedToArray(e.data,3),exportedBoard=_e$data[0],winStatus=_e$data[1],thinkTime=_e$data[2];var board=FullBoard.importBoard(exportedBoard);var nextBoard=mcst.findNextMove(board,winStatus,thinkTime);// @ts-ignore\npostMessage(nextBoard.exportBoard());};\naddEventListener('message', function (e) {var ref = e.data;var type = ref.type;var method = ref.method;var id = ref.id;var params = ref.params;var f,p;if (type === 'RPC' && method) {if (f = __webpack_exports__[method]) {p = Promise.resolve().then(function () { return f.apply(__webpack_exports__, params); });} else {p = Promise.reject('No such method');}p.then(function (result) {postMessage({type: 'RPC',id: id,result: result});}).catch(function (e) {var error = {message: e};if (e.stack) {error.message = e.message;error.stack = e.stack;error.name = e.name;}postMessage({type: 'RPC',id: id,error: error});});}});postMessage({type: 'RPC',method: 'ready'});"],"sourceRoot":""}