{"version":3,"sources":["worker.ts","robot/tic-tac-toe/Board.ts","robot/tic-tac-toe/CustomTicTacToe.ts","robot/tic-tac-toe/FullBoard.ts","robot/tic-tac-toe/GameVsAi.ts","App.tsx","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","WinStatus","winningBoards","CustomTicTacToeBoard","presence","color","lastPerformedMove","printEachMove","copy","this","checkStatus","IN_PROGRESS","Array","fill","undefined","map","_","index","filter","number","move","playerOneToMove","bitMask","some","board","PLAYER_X","PLAYER_O","DRAW","status","i","row","j","player","push","join","newBoard","FullBoard","currentBoard","boards","clone","exportBoard","getAvailableMoves","availableMoves","getAvailableMovesForOuterGrid","forEach","innerMove","boardToCheck","outerMove","Math","floor","performMove","updatePresenceAndColor","printBoard","getRows","length","winners","reduce","acc","playerO","playerX","g","getPrintedRows","a","b","c","res","x","console","log","exportedBoard","importBoard","getThinkingTimeForDifficulty","difficulty","GameVsAi","humanPlayer","worker","resolvePromise","onmessage","e","data","type","grid","getBoards","selectedSquare","currentPlayer","getPlayerToMove","winStatus","includes","getState","JSON","stringify","promise","Promise","resolve","timeToThink","postMessage","FullScreenContainer","styled","div","BoardWrapper","TicTacContainer","p","gap","isWon","isSelected","DifficultyContainer","Square","state","getColor","game","App","useState","setGrid","localSelectedSquare","setLocalSelectedSquare","setDifficulty","useEffect","getNextAiMove","doThing","onClick","s","getStateFromWinStatus","window","location","reload","square","squareIdx","key","getBoard","idx","box","boxIdx","ev","stopPropagation","newState","handleBoxClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83871ec0.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = []\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"7362b3c3f320ddb0e423.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","const winningBoards: Array<number> = [\n  0b111000000,\n  0b000111000,\n  0b000000111,\n  0b100100100,\n  0b010010010,\n  0b001001001,\n  0b100010001,\n  0b001010100\n];\n\nexport interface Board {\n  clone(): Board;\n  getAvailableMoves(): Array<number>;\n  getPlayerToMove(): WinStatus;\n  getLatestPlayerToMove(): WinStatus;\n  getOpposedStatus(status: WinStatus): WinStatus;\n  performMove(move: number): void;\n  checkStatus(): WinStatus;\n  printBoard(): void;\n}\n\nexport enum WinStatus {\n  IN_PROGRESS = \"IN_PROGRESS\",\n  DRAW = \"DRAW\",\n  PLAYER_X = \"PLAYER_X\",\n  PLAYER_O = \"PLAYER_O\"\n}\n\nexport class TicTacToeBoard implements Board {\n  presence: number = 0;\n  color: number = 0;\n  playerOneToMove: boolean = true;\n  printEachMove: boolean = false;\n\n  clone() {\n    const copy = new TicTacToeBoard();\n    copy.presence = this.presence;\n    copy.color = this.color;\n    copy.playerOneToMove = this.playerOneToMove;\n    return copy;\n  }\n\n  getAvailableMoves(): Array<number> {\n    return new Array(9)\n      .fill(undefined)\n      .map((_, index) => index)\n      .filter(number => {\n        const bitMask = 2 ** number;\n        return (bitMask & this.presence) === 0;\n      });\n  }\n\n  getPlayerToMove() {\n    return this.playerOneToMove ? WinStatus.PLAYER_X : WinStatus.PLAYER_O;\n  }\n\n  getLatestPlayerToMove() {\n    return this.playerOneToMove ? WinStatus.PLAYER_O : WinStatus.PLAYER_X;\n  }\n\n  performMove(move: number) {\n    const bitMask = 2 ** move;\n\n    this.presence = this.presence | bitMask;\n    if (this.playerOneToMove) {\n      this.color = this.color | bitMask;\n    }\n\n    this.playerOneToMove = !this.playerOneToMove;\n    if (this.printEachMove) this.printBoard();\n  }\n\n  checkStatus() {\n    if (\n      winningBoards.some(\n        board => (this.presence & board & this.color) === board\n      )\n    )\n      return WinStatus.PLAYER_X;\n\n    if (\n      winningBoards.some(\n        board => (this.presence & board & ~this.color) === board\n      )\n    )\n      return WinStatus.PLAYER_O;\n\n    if (this.presence === 0b111111111) return WinStatus.DRAW;\n    return WinStatus.IN_PROGRESS;\n  }\n\n  getOpposedStatus(status: WinStatus) {\n    if (status === WinStatus.PLAYER_O) return WinStatus.PLAYER_X;\n    return WinStatus.PLAYER_O;\n  }\n\n  playRandomGame() {\n    this.printBoard();\n    while (this.checkStatus() === WinStatus.IN_PROGRESS) {\n      const moves = this.getAvailableMoves();\n      const randomMove = moves[Math.floor(Math.random() * moves.length)];\n      this.performMove(randomMove);\n    }\n  }\n\n  printBoard() {\n    const board = [];\n\n    for (let i = 0; i < 3; i++) {\n      const row = [];\n\n      for (let j = 0; j < 3; j++) {\n        const move = i * 3 + j;\n        if ((2 ** move) & this.presence) {\n          const player = (2 ** move) & this.color;\n          row.push(player ? \"x\" : \"o\");\n        } else row.push(\" \");\n      }\n      board.push(`| ${row.join(\" \")} |`);\n    }\n    const boardStatus = `Win status: ${this.checkStatus()}, Player to move: ${this.getPlayerToMove()}`;\n    console.log(`${boardStatus}\\n${board.join(\"\\n\")}`);\n  }\n}\n","import { WinStatus } from \"./Board\";\n\nconst winningBoards: Array<number> = [\n  0b111000000,\n  0b000111000,\n  0b000000111,\n  0b100100100,\n  0b010010010,\n  0b001001001,\n  0b100010001,\n  0b001010100\n];\n\ninterface ExportedBoard {\n  presence: number;\n  color: number;\n}\nexport class CustomTicTacToeBoard {\n  presence: number = 0;\n  color: number = 0;\n  lastPerformedMove: WinStatus | null = null;\n  printEachMove: boolean = false;\n\n  clone() {\n    const copy = new CustomTicTacToeBoard();\n    copy.presence = this.presence;\n    copy.color = this.color;\n    copy.lastPerformedMove = this.lastPerformedMove;\n    return copy;\n  }\n\n  static importBoard(board: ExportedBoard) {\n    const newBoard = new CustomTicTacToeBoard();\n    newBoard.presence = board.presence;\n    newBoard.color = board.color;\n    return newBoard;\n  }\n\n  exportBoard(): ExportedBoard {\n    return {\n      presence: this.presence,\n      color: this.color\n    };\n  }\n\n  getAvailableMoves(): Array<number> {\n    if (this.checkStatus() !== WinStatus.IN_PROGRESS) return [];\n\n    return new Array(9)\n      .fill(undefined)\n      .map((_, index) => index)\n      .filter(number => {\n        const bitMask = 2 ** number;\n        return (bitMask & this.presence) === 0;\n      });\n  }\n\n  performMove(move: number, playerOneToMove: boolean) {\n    const bitMask = 2 ** move;\n\n    this.presence = this.presence | bitMask;\n    if (playerOneToMove) {\n      this.color = this.color | bitMask;\n    }\n  }\n\n  checkStatus() {\n    if (\n      winningBoards.some(\n        board => (this.presence & board & this.color) === board\n      )\n    )\n      return WinStatus.PLAYER_X;\n\n    if (\n      winningBoards.some(\n        board => (this.presence & board & ~this.color) === board\n      )\n    )\n      return WinStatus.PLAYER_O;\n\n    if (this.presence === 0b111111111) return WinStatus.DRAW;\n    return WinStatus.IN_PROGRESS;\n  }\n\n  getOpposedStatus(status: WinStatus) {\n    if (status === WinStatus.PLAYER_O) return WinStatus.PLAYER_X;\n    return WinStatus.PLAYER_O;\n  }\n\n  getRows() {\n    return new Array(9)\n      .fill(undefined)\n      .map((_, index) => index)\n      .map(number => {\n        const bitMask = 2 ** number;\n        if ((bitMask & this.presence) === 0) return \"empty\";\n        else if ((bitMask & this.presence & this.color) === 0) return \"player2\";\n        return \"player1\";\n      });\n  }\n\n  getPrintedRows(): string[] {\n    const board = [];\n\n    for (let i = 0; i < 3; i++) {\n      const row = [];\n\n      for (let j = 0; j < 3; j++) {\n        const move = i * 3 + j;\n        if ((2 ** move) & this.presence) {\n          const player = (2 ** move) & this.color;\n          row.push(player ? \"x\" : \"o\");\n        } else row.push(\" \");\n      }\n      board.push(`| ${row.join(\" \")} |`);\n    }\n\n    return board;\n  }\n}\n","import { Board, WinStatus } from \"./Board\";\nimport { CustomTicTacToeBoard } from \"./CustomTicTacToe\";\n\nconst winningBoards: Array<number> = [\n  0b111000000,\n  0b000111000,\n  0b000000111,\n  0b100100100,\n  0b010010010,\n  0b001001001,\n  0b100010001,\n  0b001010100\n];\n\ninterface ExportedBoard {\n  color: number;\n  presence: number;\n  currentBoard: number | null;\n  boards: Array<{ presence: number; color: number }>;\n  playerOneToMove: boolean;\n}\nexport class FullBoard implements Board {\n  printEachMove: boolean = false;\n  currentBoard: number | null = null;\n  private presence: number = 0;\n  private color: number = 0;\n  private playerOneToMove: boolean = true;\n  boards: Array<CustomTicTacToeBoard> = [];\n\n  constructor() {\n    for (let i = 0; i < 9; i++) {\n      this.boards.push(new CustomTicTacToeBoard());\n    }\n  }\n\n  clone() {\n    const copy = new FullBoard();\n    copy.currentBoard = this.currentBoard;\n    copy.presence = this.presence;\n    copy.color = this.color;\n    copy.playerOneToMove = this.playerOneToMove;\n    copy.boards = this.boards.map(board => board.clone());\n    return copy;\n  }\n\n  static importBoard(exportedBoard: ExportedBoard) {\n    const newBoard = new FullBoard();\n    newBoard.color = exportedBoard.color;\n    newBoard.presence = exportedBoard.presence;\n    newBoard.currentBoard = exportedBoard.currentBoard;\n    newBoard.boards = exportedBoard.boards.map(board =>\n      CustomTicTacToeBoard.importBoard(board)\n    );\n    newBoard.playerOneToMove = exportedBoard.playerOneToMove;\n    return newBoard;\n  }\n\n  exportBoard(): ExportedBoard {\n    return {\n      color: this.color,\n      presence: this.presence,\n      currentBoard: this.currentBoard,\n      boards: this.boards.map(board => board.exportBoard()),\n      playerOneToMove: this.playerOneToMove\n    };\n  }\n\n  private getAvailableMovesForOuterGrid() {\n    return new Array(9)\n      .fill(undefined)\n      .map((_, index) => index)\n      .filter(number => {\n        const bitMask = 2 ** number;\n        return (bitMask & this.presence) === 0;\n      });\n  }\n\n  getAvailableMoves() {\n    // if there is a selected board\n    if (this.currentBoard !== null)\n      return this.boards[this.currentBoard].getAvailableMoves();\n\n    const availableMoves: Array<number> = [];\n    this.getAvailableMovesForOuterGrid().forEach(move => {\n      const board = this.boards[move];\n      if (board.checkStatus() === WinStatus.IN_PROGRESS) {\n        board.getAvailableMoves().forEach(innerMove => {\n          availableMoves.push(move * 10 + innerMove + 10);\n        });\n      }\n    });\n\n    return availableMoves;\n  }\n\n  getPlayerToMove() {\n    return this.playerOneToMove ? WinStatus.PLAYER_X : WinStatus.PLAYER_O;\n  }\n\n  getLatestPlayerToMove() {\n    return this.playerOneToMove ? WinStatus.PLAYER_O : WinStatus.PLAYER_X;\n  }\n\n  private updatePresenceAndColor(boardToCheck: number) {\n    const board = this.boards[boardToCheck];\n\n    const status = board.checkStatus();\n    // lets do nothing for draws for the moment and see how it works out\n    if (status !== WinStatus.IN_PROGRESS && status !== WinStatus.DRAW) {\n      const bitMask = 2 ** boardToCheck;\n      this.presence = this.presence | bitMask;\n\n      if (status === WinStatus.PLAYER_X) {\n        this.color = this.color | bitMask;\n      }\n    }\n  }\n\n  performMove(move: number) {\n    const outerMove = move < 9 ? this.currentBoard : Math.floor(move / 10) - 1;\n    const innerMove = move < 9 ? move : move % 10;\n\n    // @ts-ignore\n    this.boards[outerMove].performMove(innerMove, this.playerOneToMove);\n\n    const statusOfNextBoard = this.boards[innerMove].checkStatus();\n\n    if (statusOfNextBoard === WinStatus.IN_PROGRESS)\n      this.currentBoard = innerMove;\n    else {\n      this.currentBoard = null;\n    }\n\n    // @ts-ignore\n    this.updatePresenceAndColor(outerMove);\n\n    this.playerOneToMove = !this.playerOneToMove;\n\n    if (this.printEachMove) this.printBoard();\n  }\n\n  getBoards() {\n    return this.boards.map(board => board.getRows());\n  }\n\n  checkStatus() {\n    if (\n      winningBoards.some(\n        board => (this.presence & board & this.color) === board\n      )\n    )\n      return WinStatus.PLAYER_X;\n\n    if (\n      winningBoards.some(\n        board => (this.presence & board & ~this.color) === board\n      )\n    )\n      return WinStatus.PLAYER_O;\n\n    if (this.getAvailableMoves().length === 0) {\n      const winners = this.boards.reduce(\n        (acc, board) => {\n          if (board.checkStatus() === WinStatus.PLAYER_O)\n            return { ...acc, playerO: acc.playerO + 1 };\n          if (board.checkStatus() === WinStatus.PLAYER_X)\n            return { ...acc, playerX: acc.playerX + 1 };\n          return acc;\n        },\n        { playerO: 0, playerX: 0 }\n      );\n      if (winners.playerO > winners.playerX) return WinStatus.PLAYER_O;\n      if (winners.playerX > winners.playerO) return WinStatus.PLAYER_X;\n      return WinStatus.DRAW;\n    }\n    return WinStatus.IN_PROGRESS;\n  }\n\n  getOpposedStatus(status: WinStatus) {\n    if (status === WinStatus.PLAYER_O) return WinStatus.PLAYER_X;\n    return WinStatus.PLAYER_O;\n  }\n  printBoard() {\n    const board = [];\n    for (let i = 0; i < 3; i++) {\n      const row: string[][] = [[], [], []];\n      for (let j = 0; j < 3; j++) {\n        const g = i * 3 + j;\n        const [a, b, c] = this.boards[g].getPrintedRows();\n\n        row[0].push(a);\n        row[1].push(b);\n        row[2].push(c);\n      }\n      const res = row.map(x => x.join(\"    \")).join(\"\\n\");\n      board.push(res);\n    }\n    console.log(\n      `\nGame status: ${this.checkStatus()} -- Current square: ${\n        this.currentBoard !== null ? this.currentBoard + 1 : \"None\"\n      }\n\n${board.join(\"\\n\\n\")}\n`\n    );\n  }\n}\n","import { WinStatus, Board } from \"./Board\";\nimport { FullBoard } from \"./FullBoard\";\n// @ts-ignore\nimport worker from \"workerize-loader!../../worker\"; // eslint-disable-line\n\nconst getThinkingTimeForDifficulty = (\n  difficulty: \"easy\" | \"intermediate\" | \"hard\"\n) => {\n  switch (difficulty) {\n    case \"easy\":\n      return 3000;\n    case \"intermediate\":\n      return 5000;\n    case \"hard\":\n      return 10000;\n  }\n};\n\nexport class GameVsAi {\n  private humanPlayer: WinStatus = WinStatus.PLAYER_X;\n  private board = new FullBoard();\n  private worker: any;\n  private resolvePromise: any;\n\n  constructor(humanPlayer: WinStatus = WinStatus.PLAYER_X) {\n    this.humanPlayer = humanPlayer;\n\n    this.worker = new worker();\n    this.worker.onmessage = (e: any) => {\n      if (e.data.type === \"RPC\") return;\n      this.resolvePromise(e.data);\n    };\n  }\n\n  getBoard() {\n    return this.board;\n  }\n\n  getState() {\n    return {\n      grid: this.board.getBoards(),\n      selectedSquare: this.board.currentBoard,\n      currentPlayer: this.board.getPlayerToMove(),\n      winStatus: this.board.checkStatus()\n    };\n  }\n\n  performMove(move: number) {\n    if (!this.board.getAvailableMoves().includes(move)) {\n      console.log(\n        `tried to perform move ${move}.\\n available moves are \\n ${JSON.stringify(\n          this.board.getAvailableMoves()\n        )}`\n      );\n      return this.getState();\n    }\n    console.log(`performed move: ${move}`);\n\n    this.board.performMove(move);\n    return this.getState();\n  }\n\n  async getNextAiMove(difficulty: \"easy\" | \"intermediate\" | \"hard\") {\n    const promise = new Promise<any>(resolve => {\n      this.resolvePromise = resolve;\n    });\n\n    const timeToThink = getThinkingTimeForDifficulty(difficulty);\n    this.worker.postMessage([\n      this.board.exportBoard(),\n      WinStatus.PLAYER_O,\n      timeToThink\n    ]);\n    const exportedBoard = await promise;\n    this.board = FullBoard.importBoard(exportedBoard);\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { GameVsAi } from \"./robot/tic-tac-toe/GameVsAi\";\nimport { WinStatus } from \"./robot/tic-tac-toe/Board\";\n\nconst FullScreenContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n`;\n\nconst BoardWrapper = styled.div`\n  width: 60vmin;\n  height: 60vmin;\n\n  @media (max-width: 768px) {\n    width: 80vmin;\n    height: 80vmin;\n  }\n\n  @media (max-width: 480px) {\n    width: 95vmin;\n    height: 95vmin;\n  }\n`;\n\nconst TicTacContainer = styled.div<{\n  gap?: boolean;\n  isSelected?: boolean;\n  isWon?: WinStatus | false;\n}>`\n  width: 100%;\n  height: 100%;\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n\n  ${p =>\n    p.gap &&\n    `\n  grid-gap: 64px;\n\n  @media (max-width: 768px) {\n    grid-gap: 16px;\n  }\n\n  @media (max-width: 480px) {\n    grid-gap: 8px\n  }\n\n          `};\n  ${p => p.isWon === WinStatus.PLAYER_X && \"border: 3px solid blue\"}\n  ${p => p.isWon === WinStatus.PLAYER_O && \"border: 3px solid green\"}\n  ${p => p.isSelected && \"border: 3px solid yellow\"}\n`;\n\nconst DifficultyContainer = styled.div`\n  & > button {\n    font-size: 1.5rem;\n    background-color: white;\n    border-radius: 8px;\n    padding: 8px;\n    cursor: pointer;\n    -webkit-appearance: none;\n\n    &:not(:last-child) {\n      margin-right: 16px;\n    }\n  }\n`;\n\nconst getColor = (state: \"empty\" | \"player1\" | \"player2\") => {\n  switch (state) {\n    case \"empty\": {\n      return \"white\";\n    }\n    case \"player1\": {\n      return \"blue\";\n    }\n    case \"player2\": {\n      return \"green\";\n    }\n  }\n};\n\nconst getStateFromWinStatus = (status: WinStatus) => {\n  let s = \"\";\n  switch (status) {\n    case WinStatus.PLAYER_O:\n      s = \"Robot wins! Better luck next time.\";\n      break;\n    case WinStatus.PLAYER_X:\n      s = \"You win! Congratulations!\";\n      break;\n    case WinStatus.DRAW:\n      s = \"It's a draw!\";\n      break;\n  }\n  return `${s} To start a new game, refresh the page.`;\n};\n\nconst Square = styled.div<{ state: \"empty\" | \"player1\" | \"player2\" }>`\n  border: 1px solid black;\n  background-color: ${p => getColor(p.state)};\n`;\n\nconst game = new GameVsAi();\nexport const App = () => {\n  const [\n    { grid, selectedSquare, currentPlayer, winStatus },\n    setGrid\n  ] = useState(game.getState());\n  const [localSelectedSquare, setLocalSelectedSquare] = useState<number | null>(\n    null\n  );\n  const [difficulty, setDifficulty] = useState<\n    \"easy\" | \"intermediate\" | \"hard\" | null\n  >(null);\n\n  const handleSquareClick = (idx: number) => {\n    if (\n      currentPlayer !== WinStatus.PLAYER_X ||\n      winStatus !== WinStatus.IN_PROGRESS ||\n      game.getBoard().boards[idx].checkStatus() !== WinStatus.IN_PROGRESS\n    )\n      return;\n    if (selectedSquare !== null) return;\n    setLocalSelectedSquare(idx);\n  };\n\n  const handleBoxClick = (ev: any, squareIdx: number, boxIdx: number) => {\n    if (\n      currentPlayer !== WinStatus.PLAYER_X ||\n      winStatus !== WinStatus.IN_PROGRESS\n    )\n      return;\n    if (selectedSquare === squareIdx) {\n      ev.stopPropagation();\n      game.performMove(boxIdx);\n\n      setGrid(game.getState());\n    }\n    if (localSelectedSquare !== squareIdx) return;\n\n    const newState = game.performMove((localSelectedSquare + 1) * 10 + boxIdx);\n    setGrid(newState);\n  };\n\n  useEffect(() => {\n    setLocalSelectedSquare(null);\n  }, [selectedSquare]);\n\n  useEffect(() => {\n    if (currentPlayer === WinStatus.PLAYER_O) {\n      const doThing = async () => {\n        if (difficulty === null) return;\n        await game.getNextAiMove(difficulty);\n        setGrid(game.getState());\n      };\n      doThing();\n    }\n  }, [currentPlayer, difficulty]);\n\n  return (\n    <FullScreenContainer>\n      {difficulty === null ? (\n        <DifficultyContainer>\n          <h1>Select difficulty</h1>\n          <button onClick={() => setDifficulty(\"easy\")}>Easy</button>\n          <button onClick={() => setDifficulty(\"intermediate\")}>\n            Intermediate\n          </button>\n          <button onClick={() => setDifficulty(\"hard\")}>Hard</button>\n        </DifficultyContainer>\n      ) : (\n        <BoardWrapper>\n          {winStatus !== WinStatus.IN_PROGRESS && (\n            <>\n              <p>{getStateFromWinStatus(winStatus)}</p>\n              <button onClick={() => window.location.reload()}>Refresh</button>\n            </>\n          )}\n          {winStatus === WinStatus.IN_PROGRESS ? (\n            currentPlayer === WinStatus.PLAYER_X ? (\n              <p>It is your turn to move</p>\n            ) : (\n              <p>Robot is thinking...</p>\n            )\n          ) : null}\n          <TicTacContainer gap={true}>\n            {grid.map((square, squareIdx) => (\n              <TicTacContainer\n                key={squareIdx}\n                isWon={\n                  [WinStatus.PLAYER_O, WinStatus.PLAYER_X].includes(\n                    game.getBoard().boards[squareIdx].checkStatus()\n                  ) && game.getBoard().boards[squareIdx].checkStatus()\n                }\n                isSelected={\n                  squareIdx === selectedSquare ||\n                  squareIdx === localSelectedSquare\n                }\n                onClick={() => handleSquareClick(squareIdx)}\n              >\n                {square.map((box, boxIdx) => (\n                  <Square\n                    key={boxIdx}\n                    onClick={ev => handleBoxClick(ev, squareIdx, boxIdx)}\n                    state={box}\n                  />\n                ))}\n              </TicTacContainer>\n            ))}\n          </TicTacContainer>\n        </BoardWrapper>\n      )}\n    </FullScreenContainer>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nimport \"./global.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}